// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transformer GraphQL document transformation should ignore NoSubstitutionTemplateLiteral when tag is set 1`] = `
"const query = \`abc\`;
"
`;

exports[`transformer GraphQL document transformation should ignore TaggedTemplateExpression when the node does not match tag name 1`] = `
"const query = hoge \`abc\`;
"
`;

exports[`transformer GraphQL document transformation should ignore TemplateExpression when tag is set 1`] = `
"const query = \`abc\${def}\`;
"
`;

exports[`transformer GraphQL document transformation should transform NoSubstitutionTemplateLiteral 1`] = `
"const query = {
    kind: \\"Document\\",
    definitions: [{
            kind: \\"OperationDefinition\\",
            operation: \\"query\\",
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: \\"SelectionSet\\",
                selections: [{
                        kind: \\"Field\\",
                        name: {
                            kind: \\"Name\\",
                            value: \\"hello\\"
                        },
                        arguments: [],
                        directives: []
                    }]
            }
        }]
};
"
`;

exports[`transformer GraphQL document transformation should transform TaggedTemplateExpression 1`] = `
"const query = {
    kind: \\"Document\\",
    definitions: [{
            kind: \\"OperationDefinition\\",
            operation: \\"query\\",
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: \\"SelectionSet\\",
                selections: [{
                        kind: \\"Field\\",
                        name: {
                            kind: \\"Name\\",
                            value: \\"hello\\"
                        },
                        arguments: [],
                        directives: []
                    }]
            }
        }]
};
"
`;

exports[`transformer GraphQL document transformation should transform TaggedTemplateExpression when the node matches tag name 1`] = `
"const query = {
    kind: \\"Document\\",
    definitions: [{
            kind: \\"OperationDefinition\\",
            operation: \\"query\\",
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: \\"SelectionSet\\",
                selections: [{
                        kind: \\"Field\\",
                        name: {
                            kind: \\"Name\\",
                            value: \\"hello\\"
                        },
                        arguments: [],
                        directives: []
                    }]
            }
        }]
};
"
`;

exports[`transformer GraphQL document transformation should transform TemplateExpression 1`] = `
"const query = {
    kind: \\"Document\\",
    definitions: [{
            kind: \\"OperationDefinition\\",
            operation: \\"query\\",
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: \\"SelectionSet\\",
                selections: [{
                        kind: \\"Field\\",
                        name: {
                            kind: \\"Name\\",
                            value: \\"hello\\"
                        },
                        arguments: [],
                        directives: []
                    }]
            }
        }]
};
"
`;

exports[`transformer GraphQL document transformation should transform innder document with documentTransformers 1`] = `
"const query = {
    kind: \\"Document\\",
    definitions: [{
            kind: \\"OperationDefinition\\",
            operation: \\"query\\",
            name: {
                kind: \\"Name\\",
                value: \\"MyQuery\\"
            },
            variableDefinitions: [],
            directives: [],
            selectionSet: {
                kind: \\"SelectionSet\\",
                selections: [{
                        kind: \\"Field\\",
                        name: {
                            kind: \\"Name\\",
                            value: \\"hello\\"
                        },
                        arguments: [],
                        directives: []
                    }]
            }
        }]
};
"
`;

exports[`transformer GraphQL document transformation should transform to 0 literal when removeFragmentDefinitons: true and document has only fragments 1`] = `
"const fragment = 0;
"
`;

exports[`transformer GraphQL document transformation should transform to empty string when removeFragmentDefinitons: true and document has only fragments, text target 1`] = `
"const fragment = \\"\\";
"
`;

exports[`transformer GraphQL document transformation should transform to string literal when target is text 1`] = `
"const query = \\"query MyQuery {\\\\n  hello\\\\n}\\\\n\\";
"
`;

exports[`transformer import declaration transformation default import should ignore tag import when tag is not matched 1`] = `
"import hoge from \\"hoge\\";
"
`;

exports[`transformer import declaration transformation default import should ignore tag import without tag 1`] = `
"import hoge from \\"hoge\\";
"
`;

exports[`transformer import declaration transformation default import should remove only matched identifier 1`] = `
"import { foo } from \\"hoge\\";
"
`;

exports[`transformer import declaration transformation default import should remove tag import when tag is matched 1`] = `""`;

exports[`transformer import declaration transformation named import should ignore tag import when tag is not matched 1`] = `
"import { hoge } from \\"hoge\\";
"
`;

exports[`transformer import declaration transformation named import should ignore tag import without tag 1`] = `
"import { hoge } from \\"hoge\\";
"
`;

exports[`transformer import declaration transformation named import should remove alias tag import when tag is matched 1`] = `""`;

exports[`transformer import declaration transformation named import should remove only matched identifier 1`] = `
"import foo, { bar } from \\"hoge\\";
"
`;

exports[`transformer import declaration transformation named import should remove tag import when tag is matched 1`] = `""`;

exports[`transformer misc options should nothing when getEnabled optins returns falsy 1`] = `
"const query = \`abc\`;
"
`;
